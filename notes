1. جدول المستخدمين (Users)

user_id: رقم تعريف المستخدم (مفتاح أساسي).
full_name: اسم المستخدم.
email: البريد الإلكتروني.
password: ,
role: 
stutus: 
isdeleted: , 

CREATE TABLE "User" (
    user_id SERIAL PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL DEFAULT 'user' CHECK (role IN ('user', 'driver', 'admin')),
    status VARCHAR(50) DEFAULT NULL CHECK (status IN ('pending', 'approved', 'rejected')),

    -- شرط: status يجب أن يكون NOT NULL إذا كان role = 'driver'
    CONSTRAINT check_driver_status CHECK (
        (role = 'driver' AND status IS NOT NULL) OR
        (role <> 'driver' AND status IS NULL)
    ),
    isDeleted BOOLEAN NOT NULL DEFAULT FALSE
);


#######################################

2. جدول الحجوزات (Bookings)

booking_id: رقم تعريف الحجز (مفتاح أساسي).
user_id: معرف المستخدم (مفتاح خارجي يرتبط بجدول Users).
bus_id: معرف الحافلة (مفتاح خارجي يرتبط بجدول Buses).
seat_number: رقم المقعد المحجوز.
; departure_location: نقطة الانطلاق.
; arrival_location: نقطة الوصول.
; departure_time: موعد بدء الرحلة.
تُستخدم هذه الجدول لتخزين تفاصيل الحجز لكل مستخدم، مما يسمح بربط المستخدمين بالرحلات المحددة.

CREATE TABLE Bookings (
    booking_id SERIAL PRIMARY KEY, -- رقم تعريف الحجز (مفتاح أساسي)
    user_id INT NOT NULL, -- معرف المستخدم (يجب أن يكون موجودًا)
    bus_id INT NOT NULL, -- معرف الحافلة (يجب أن يكون موجودًا)
    seat_number INT NOT NULL, -- رقم المقعد المحجوز
    ; departure_location VARCHAR(255) NOT NULL, -- نقطة الانطلاق
    ; arrival_location VARCHAR(255) NOT NULL, -- نقطة الوصول
    ; departure_time TIMESTAMP NOT NULL, -- موعد بدء الرحلة
    
    -- ربط user_id بجدول Users
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE,

    -- ربط bus_id بجدول Buses
    CONSTRAINT fk_bus FOREIGN KEY (bus_id) REFERENCES Buses(bus_id) ON DELETE CASCADE

        payment_method: {
      type: DataTypes.ENUM("credit_card", "paypal", "cash"),
      allowNull: false,
    },
    payment_status: {
      type: DataTypes.STRING(50),
      allowNull: false,
      defaultValue: "pending", // Default value as 'pending'
    },
);

#######################################

3. جدول الحافلات (Buses)

bus_id: رقم تعريف الحافلة (مفتاح أساسي).
bus_number: رقم الحافلة.
driver_id: معرف السائق (مفتاح خارجي يشير إلى BusDrivers).
route_id: معرف المسار (مفتاح خارجي يشير إلى Routes).
gps_device: بيانات أو معرف جهاز تتبع الـ GPS.
العلاقة بين الحافلات والسائقين تكون واحد إلى واحد، وبين الحافلات والمسارات أيضاً واحد إلى واحد.

CREATE TABLE Buses (
    bus_id SERIAL PRIMARY KEY,
    bus_number VARCHAR(50) NOT NULL UNIQUE,
    seat_number INTEGER,
    bus_route VARCHAR(255),
    launch_date TIMESTAMP,
    price DECIMAL(10,2),
    gps_device VARCHAR(255),
    driver_id INTEGER,
    route_id,
    CONSTRAINT fk_user
        FOREIGN KEY (user_id)
        REFERENCES "User"(user_id)
);

ALTER TABLE Buses
ADD COLUMN status INTEGER DEFAULT 1 CHECK (status IN (1, 2, 3));

CREATE OR REPLACE FUNCTION update_status_change_time() 
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.status IN (1, 3) AND OLD.status = 2 THEN
        NEW.status_change_time := NOW() + INTERVAL '30 minutes';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER before_update_bus
BEFORE UPDATE ON buses
FOR EACH ROW
EXECUTE FUNCTION update_status_change_time();

ALTER TABLE Buses
ADD COLUMN status_change_time TIMESTAMP;

ALTER TABLE "Buses"
ADD CONSTRAINT fk_driver FOREIGN KEY (driver_id) REFERENCES "Driver"(driver_id) ON DELETE SET NULL;

ALTER TABLE Buses
ADD CONSTRAINT fk_route FOREIGN KEY (route_id) REFERENCES routes(route_id) ON DELETE CASCADE;

ALTER TABLE "Buses"
  ALTER COLUMN "bus_number" TYPE VARCHAR(255);


1 =>  الباص بالمجمع
2 => الباص على الطريق 
3 => الباص بالجامعة


ALTER TABLE Buses
ADD COLUMN seat_capacity INT NOT NULL DEFAULT 50;

-- إضافة العمود الجديد لتخزين رابط الصورة
ALTER TABLE Buses
ADD COLUMN bus_image VARCHAR(255) DEFAULT 'https://themeenergy.com/themes/html/transfers/images/uploads/bus.jpg';

-- تحديث جميع السجلات لتخزين رابط الصورة الثابت
UPDATE Buses
SET bus_image = 'https://themeenergy.com/themes/html/transfers/images/uploads/bus.jpg';
#######################################


4. جدول المسارات (Routes)

route_id: رقم تعريف المسار (مفتاح أساسي).
route_name: اسم المسار.
start_point: نقطة البداية.
end_point: نقطة النهاية.


CREATE TABLE Routes (
    route_id SERIAL PRIMARY KEY,
    route_name VARCHAR(255) NOT NULL UNIQUE,
    start_point VARCHAR(255) NOT NULL,
    end_point VARCHAR(255) NOT NULL
);


يمكن إضافة عمود يشير للمنطقة لتصنيف كل مسار حسب المنطقة:
ALTER TABLE Routes
ADD COLUMN region_id INT REFERENCES Regions(region_id) ON DELETE SET NULL;
#######################################

6. جدول تتبع GPS (GPS_Tracking)

tracking_id: رقم تعريف التسجيل (مفتاح أساسي).
bus_id: معرف الحافلة (مفتاح خارجي يشير إلى Buses).
timestamp: وقت تسجيل الموقع.
latitude و longitude: إحداثيات الحافلة في ذلك الوقت.
يساعد هذا الجدول في تتبع موقع الحافلات بشكل دوري لتحديث موقعها الحقيقي.

CREATE TABLE GPS_Tracking (
    tracking_id SERIAL PRIMARY KEY, -- رقم تعريف التسجيل (مفتاح أساسي)
    bus_id INT NOT NULL, -- معرف الحافلة (مفتاح خارجي يشير إلى Buses)
    timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, -- وقت تسجيل الموقع (مع قيمة افتراضية)
    latitude DECIMAL(9,6) NOT NULL, -- إحداثيات خط العرض
    longitude DECIMAL(9,6) NOT NULL, -- إحداثيات خط الطول
    speed DECIMAL(5,2), -- سرعة الحافلة (اختياري)
    direction VARCHAR(50), -- اتجاه الحافلة (اختياري: شمال، جنوب، شرق، غرب)
    altitude DECIMAL(6,2), -- الارتفاع عن سطح البحر (اختياري)
    
    -- ربط bus_id بجدول Buses
    CONSTRAINT fk_bus_tracking FOREIGN KEY (bus_id) REFERENCES Buses(bus_id) ON DELETE CASCADE
);

#######################################

7. جدول الإشعارات (Notifications)

notification_id: رقم تعريف الإشعار (مفتاح أساسي).
user_id: معرف المستخدم (مفتاح خارجي يشير إلى Users).
bus_id: معرف الحافلة (مفتاح خارجي يشير إلى Buses).
message: نص الإشعار (مثل "الحافلة قريبة من موقعك").
timestamp: وقت إرسال الإشعار.
هذا الجدول يُستخدم لإرسال إشعارات للمستخدمين بناءً على موقع الحافلة والرحلات المحجوزة.

CREATE TABLE Notifications (
    notification_id SERIAL PRIMARY KEY,
    user_id INT NOT NULL,
    bus_id INT NOT NULL,
    message TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    CONSTRAINT fk_bus FOREIGN KEY (bus_id) REFERENCES Buses(bus_id) ON DELETE CASCADE
);

#######################################

8- Profile 

CREATE TABLE profile (
    profile_id SERIAL PRIMARY KEY,
    license_img VARCHAR(255),
    identity_img VARCHAR(255),
    phone_number VARCHAR(20),
    user_id INT,
    CONSTRAINT fk_user
        FOREIGN KEY (user_id)
        REFERENCES users(user_id)
);

9- Testimonial

CREATE TABLE testimonial (
  testimonial_id SERIAL PRIMARY KEY,
  user_id INTEGER NOT NULL,
  message TEXT NOT NULL,
  rating INTEGER NOT NULL DEFAULT 5 CHECK (rating BETWEEN 1 AND 5),
  status VARCHAR(50) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_user_id FOREIGN KEY (user_id) REFERENCES "User"(user_id) ON DELETE CASCADE
);


ALTER TABLE "profile"
ADD COLUMN bus_id INTEGER REFERENCES "Buses"(bus_id) ON DELETE SET NULL;

ALTER TABLE "profile"
ADD COLUMN isdeleted BOOLEAN NOT NULL DEFAULT FALSE;

ALTER TABLE "profile"
RENAME TO "driver";

ALTER TABLE "driver"
RENAME COLUMN "profile_id" TO "driver_id";

ALTER TABLE "driver"
DROP COLUMN "user_id";



العلاقات الرئيسية:
Users ↔ Bookings: علاقة واحد إلى متعدد (مستخدم واحد يمكنه أن يقوم بعدة حجوزات).
Bookings ↔ Buses: كل حجز يرتبط بحافلة محددة.
Buses ↔ BusDrivers: علاقة واحد إلى واحد (كل حافلة مرتبطة بسائق واحد).
Buses ↔ Routes: علاقة واحد إلى واحد (كل حافلة تسلك مساراً محدداً).
Routes ↔ Stops: علاقة واحد إلى متعدد (كل مسار يحتوي على عدة محطات).
Buses ↔ GPS_Tracking: علاقة واحد إلى متعدد (تسجيلات تتبع متعددة لكل حافلة).
Users, Buses ↔ Notifications: علاقة لتسجيل إشعارات كل مستخدم عن الحافلة المرتبطة.
هذا التصميم يوفر نظاماً متكاملاً يمكنه إدارة بيانات المستخدمين، الحجوزات، وتتبع الحافلات من خلال GPS مع إشعارات فورية عند اقتراب الحافلة، مما يلبي احتياجات التطبيق بشكل منظم ومرن.



# مسارات الباصات 

رغدان-عمان
البيادر-عمان
سحاب-عمان
حي نزال-عمان
جمرك عمان
 ابو نصير-عمان
البقعة-عمان
ناعور-عمان
 مجمع الشمال )طبربور(-عمان

السلط 
 الزرقاء 
اربد
عجلون
جرش
مادبا
المفرق

Raghadan 
North Complex (Tabarbour) 
Zarqa
Al-Bayader 
Sahab 
Nazal District 
Amman Customs
Abu Nuseir 
Al-Baqa'a 
Naour 
Salt
Irbid
Ajloun
Jerash
Madaba
Mafraq







ALTER TABLE your_table_name
ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;

 // updated_at يتحدث تلقائيًا عند أي تعديل
 
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER trigger_update_updated_at
BEFORE UPDATE ON your_table_name
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();
